import pycosatimport csvimport sysdef v(i, j, d):    return 81 * (i - 1) + 9 * (j - 1) + ddef sudoku_clauses():    res = []    for i in range(1, 10):        for j in range(1, 10):            res.append([v(i, j, d) for d in range(1, 10)])            for d in range(1, 10):                for dp in range(d + 1, 10):                    res.append([-v(i, j, d), -v(i, j, dp)])    def valid(cells):        for i, xi in enumerate(cells):            for j, xj in enumerate(cells):                if i < j:                    for d in range(1, 10):                        res.append([-v(xi[0], xi[1], d), -v(xj[0], xj[1], d)])    for i in range(1, 10):        valid([(i, j) for j in range(1, 10)])        valid([(j, i) for j in range(1, 10)])    for i in 1, 4, 7:        for j in 1, 4 ,7:            valid([(i + k % 3, j + k // 3) for k in range(9)])    assert len(res) == 81 * (1 + 36) + 27 * 324        result = open('clauses for solver.txt' , 'w')    result.write("p cnf %d \n"  % len(res))	    for item in res:    	    result.write("%s\n" % item)    return resdef solve(grid):	    clauses = sudoku_clauses()    for i in range(1, 10):        for j in range(1, 10):            d = grid[i - 1][j - 1]            if d:                clauses.append([v(i, j, d)])    sol = set(pycosat.solve(clauses))    def read_cell(i, j):        for d in range(1, 10):            if v(i, j, d) in sol:                return d    for i in range(1, 10):        for j in range(1, 10):            grid[i - 1][j - 1] = read_cell(i, j)if __name__ == '__main__':    from pprint import pprint    a = []    hard = []    x = 0    with open('this.txt') as f:    	    while x<90:    	    	    c = f.read(1)    	    	    x+=1    	    	    if c == '*' or c == '.':    	    	    	a.append(0)    	    	    elif c == '\n' or c == '\t' or len(a) == 9:    	    	    	hard.append(a)    	    	    	a = []    	    	    elif c == '1':    	    	    	a.append(1)    	    	    elif c == '2':    	    	    	a.append(2)    	    	    elif c == '3':    	    	    	a.append(3)    	    	    elif c == '4':    	    	    	a.append(4)    	    	    elif c == '5':    	    	    	a.append(5)    	    	    elif c == '6':    	    	    	a.append(6)    	    	    elif c == '7':    	    	    	a.append(7)    	    	    elif c == '8':    	    	    	a.append(8)    	    	    elif c == '9':    	    	    	a.append(9)    	    	    else:    	    	    	    a.append(c)    	    	    	    pprint(hard)   	       solve(hard)    pprint(hard)